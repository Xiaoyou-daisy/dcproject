// Code generated by goctl. DO NOT EDIT.
// goctl 1.8.4
// Source: dcrpc.proto

package dcrpcclient

import (
	"context"

	"dcproject/dcrpc/dcrpc"

	"github.com/zeromicro/go-zero/zrpc"
	"google.golang.org/grpc"
)

type (
	AmountRequest         = dcrpc.AmountRequest
	AmountResponse        = dcrpc.AmountResponse
	CalcDistanceRequest   = dcrpc.CalcDistanceRequest
	CalcDistanceResponse  = dcrpc.CalcDistanceResponse
	CityLocation          = dcrpc.CityLocation
	Driver                = dcrpc.Driver
	EndOrderRequest       = dcrpc.EndOrderRequest
	EndOrderResponse      = dcrpc.EndOrderResponse
	GetLocalhostRequest   = dcrpc.GetLocalhostRequest
	GetLocalhostResponse  = dcrpc.GetLocalhostResponse
	MonDBCreateRequest    = dcrpc.MonDBCreateRequest
	MonDBCreateResponse   = dcrpc.MonDBCreateResponse
	MongoDBRequest        = dcrpc.MongoDBRequest
	MongoDBResponse       = dcrpc.MongoDBResponse
	NearbyDriversRequest  = dcrpc.NearbyDriversRequest
	NearbyDriversResponse = dcrpc.NearbyDriversResponse
	ReceiveRequest        = dcrpc.ReceiveRequest
	ReceiveResponse       = dcrpc.ReceiveResponse
	Request               = dcrpc.Request
	Response              = dcrpc.Response
	SetLocalhostRequest   = dcrpc.SetLocalhostRequest
	SetLocalhostResponse  = dcrpc.SetLocalhostResponse
	TotalRequest          = dcrpc.TotalRequest
	TotalResponse         = dcrpc.TotalResponse

	Dcrpc interface {
		Ping(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error)
		// 今日份打车所得税
		SetLocalhost(ctx context.Context, in *SetLocalhostRequest, opts ...grpc.CallOption) (*SetLocalhostResponse, error)
		GetLocalhost(ctx context.Context, in *GetLocalhostRequest, opts ...grpc.CallOption) (*GetLocalhostResponse, error)
		CalcDistance(ctx context.Context, in *CalcDistanceRequest, opts ...grpc.CallOption) (*CalcDistanceResponse, error)
		NearbyDrivers(ctx context.Context, in *NearbyDriversRequest, opts ...grpc.CallOption) (*NearbyDriversResponse, error)
		Amount(ctx context.Context, in *AmountRequest, opts ...grpc.CallOption) (*AmountResponse, error)
		MongoDB(ctx context.Context, in *MongoDBRequest, opts ...grpc.CallOption) (*MongoDBResponse, error)
		Total(ctx context.Context, in *TotalRequest, opts ...grpc.CallOption) (*TotalResponse, error)
		Receive(ctx context.Context, in *ReceiveRequest, opts ...grpc.CallOption) (*ReceiveResponse, error)
		EndOrder(ctx context.Context, in *EndOrderRequest, opts ...grpc.CallOption) (*EndOrderResponse, error)
		MonDBCreate(ctx context.Context, in *MonDBCreateRequest, opts ...grpc.CallOption) (*MonDBCreateResponse, error)
	}

	defaultDcrpc struct {
		cli zrpc.Client
	}
)

func NewDcrpc(cli zrpc.Client) Dcrpc {
	return &defaultDcrpc{
		cli: cli,
	}
}

func (m *defaultDcrpc) Ping(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error) {
	client := dcrpc.NewDcrpcClient(m.cli.Conn())
	return client.Ping(ctx, in, opts...)
}

// 今日份打车所得税
func (m *defaultDcrpc) SetLocalhost(ctx context.Context, in *SetLocalhostRequest, opts ...grpc.CallOption) (*SetLocalhostResponse, error) {
	client := dcrpc.NewDcrpcClient(m.cli.Conn())
	return client.SetLocalhost(ctx, in, opts...)
}

func (m *defaultDcrpc) GetLocalhost(ctx context.Context, in *GetLocalhostRequest, opts ...grpc.CallOption) (*GetLocalhostResponse, error) {
	client := dcrpc.NewDcrpcClient(m.cli.Conn())
	return client.GetLocalhost(ctx, in, opts...)
}

func (m *defaultDcrpc) CalcDistance(ctx context.Context, in *CalcDistanceRequest, opts ...grpc.CallOption) (*CalcDistanceResponse, error) {
	client := dcrpc.NewDcrpcClient(m.cli.Conn())
	return client.CalcDistance(ctx, in, opts...)
}

func (m *defaultDcrpc) NearbyDrivers(ctx context.Context, in *NearbyDriversRequest, opts ...grpc.CallOption) (*NearbyDriversResponse, error) {
	client := dcrpc.NewDcrpcClient(m.cli.Conn())
	return client.NearbyDrivers(ctx, in, opts...)
}

func (m *defaultDcrpc) Amount(ctx context.Context, in *AmountRequest, opts ...grpc.CallOption) (*AmountResponse, error) {
	client := dcrpc.NewDcrpcClient(m.cli.Conn())
	return client.Amount(ctx, in, opts...)
}

func (m *defaultDcrpc) MongoDB(ctx context.Context, in *MongoDBRequest, opts ...grpc.CallOption) (*MongoDBResponse, error) {
	client := dcrpc.NewDcrpcClient(m.cli.Conn())
	return client.MongoDB(ctx, in, opts...)
}

func (m *defaultDcrpc) Total(ctx context.Context, in *TotalRequest, opts ...grpc.CallOption) (*TotalResponse, error) {
	client := dcrpc.NewDcrpcClient(m.cli.Conn())
	return client.Total(ctx, in, opts...)
}

func (m *defaultDcrpc) Receive(ctx context.Context, in *ReceiveRequest, opts ...grpc.CallOption) (*ReceiveResponse, error) {
	client := dcrpc.NewDcrpcClient(m.cli.Conn())
	return client.Receive(ctx, in, opts...)
}

func (m *defaultDcrpc) EndOrder(ctx context.Context, in *EndOrderRequest, opts ...grpc.CallOption) (*EndOrderResponse, error) {
	client := dcrpc.NewDcrpcClient(m.cli.Conn())
	return client.EndOrder(ctx, in, opts...)
}

func (m *defaultDcrpc) MonDBCreate(ctx context.Context, in *MonDBCreateRequest, opts ...grpc.CallOption) (*MonDBCreateResponse, error) {
	client := dcrpc.NewDcrpcClient(m.cli.Conn())
	return client.MonDBCreate(ctx, in, opts...)
}
