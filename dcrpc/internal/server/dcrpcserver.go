// Code generated by goctl. DO NOT EDIT.
// goctl 1.8.4
// Source: dcrpc.proto

package server

import (
	"context"

	"dcproject/dcrpc/dcrpc"
	"dcproject/dcrpc/internal/logic"
	"dcproject/dcrpc/internal/svc"
)

type DcrpcServer struct {
	svcCtx *svc.ServiceContext
	dcrpc.UnimplementedDcrpcServer
}

func NewDcrpcServer(svcCtx *svc.ServiceContext) *DcrpcServer {
	return &DcrpcServer{
		svcCtx: svcCtx,
	}
}

func (s *DcrpcServer) Ping(ctx context.Context, in *dcrpc.Request) (*dcrpc.Response, error) {
	l := logic.NewPingLogic(ctx, s.svcCtx)
	return l.Ping(in)
}

// 今日份打车所得税
func (s *DcrpcServer) SetLocalhost(ctx context.Context, in *dcrpc.SetLocalhostRequest) (*dcrpc.SetLocalhostResponse, error) {
	l := logic.NewSetLocalhostLogic(ctx, s.svcCtx)
	return l.SetLocalhost(in)
}

func (s *DcrpcServer) GetLocalhost(ctx context.Context, in *dcrpc.GetLocalhostRequest) (*dcrpc.GetLocalhostResponse, error) {
	l := logic.NewGetLocalhostLogic(ctx, s.svcCtx)
	return l.GetLocalhost(in)
}

func (s *DcrpcServer) CalcDistance(ctx context.Context, in *dcrpc.CalcDistanceRequest) (*dcrpc.CalcDistanceResponse, error) {
	l := logic.NewCalcDistanceLogic(ctx, s.svcCtx)
	return l.CalcDistance(in)
}

func (s *DcrpcServer) NearbyDrivers(ctx context.Context, in *dcrpc.NearbyDriversRequest) (*dcrpc.NearbyDriversResponse, error) {
	l := logic.NewNearbyDriversLogic(ctx, s.svcCtx)
	return l.NearbyDrivers(in)
}

func (s *DcrpcServer) Amount(ctx context.Context, in *dcrpc.AmountRequest) (*dcrpc.AmountResponse, error) {
	l := logic.NewAmountLogic(ctx, s.svcCtx)
	return l.Amount(in)
}

func (s *DcrpcServer) MongoDB(ctx context.Context, in *dcrpc.MongoDBRequest) (*dcrpc.MongoDBResponse, error) {
	l := logic.NewMongoDBLogic(ctx, s.svcCtx)
	return l.MongoDB(in)
}

func (s *DcrpcServer) Total(ctx context.Context, in *dcrpc.TotalRequest) (*dcrpc.TotalResponse, error) {
	l := logic.NewTotalLogic(ctx, s.svcCtx)
	return l.Total(in)
}

func (s *DcrpcServer) Receive(ctx context.Context, in *dcrpc.ReceiveRequest) (*dcrpc.ReceiveResponse, error) {
	l := logic.NewReceiveLogic(ctx, s.svcCtx)
	return l.Receive(in)
}

func (s *DcrpcServer) EndOrder(ctx context.Context, in *dcrpc.EndOrderRequest) (*dcrpc.EndOrderResponse, error) {
	l := logic.NewEndOrderLogic(ctx, s.svcCtx)
	return l.EndOrder(in)
}

func (s *DcrpcServer) MonDBCreate(ctx context.Context, in *dcrpc.MonDBCreateRequest) (*dcrpc.MonDBCreateResponse, error) {
	l := logic.NewMonDBCreateLogic(ctx, s.svcCtx)
	return l.MonDBCreate(in)
}
